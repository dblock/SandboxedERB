= sandboxed_erb

This is a gem that allows you to run an ERB template in a sandbox so it is safe to expose these templates to your customers to allow them to customise your application (or any other use you can think of).

This has been inspired by http://github.com/tario/shikashi, a ruby sandbox which uses the evalhook gem to intercept an rewrite every ruby call to go through an access check at runtime.
It was originally designed to run in the shikashi sandbox, but was found to be too slow as every call was being intercepted and analysed at runtime. Because a templating language does not need everything ruby offers, 
i have limited the allowed synax to a safer subset at compile time to reduce the number of runtime checks required.

== How It Works

The code does not run in a 'sandbox' like javascript, it is actually processed into 'safe' code then run using the normal ruby intepreter.

1. The template is first processed by the ERB compiler to produce valid ruby code.
2. The generated erb code is then processed to check that if conforms to the 'whitelist'of allowed syntax, as well as appending a 'to_sandbox' method onto every object (actually _sbm) to get a version of any object that is safe to use in the sandbox.
3. Run using ruby intepreter.


== Why Is The Code Safe?
1. I use a 'white list' of allowed sytax, so if ive missed something it will be denied.
2. I dont allow defining of any classes, methods or modules.
3. You cannot access global variables or constants (or define them)
4. It is assumed that any local variable is a 'sandboxed' object and that it is safe to call any method of it.
4a. The return value of any method is converted to the sandboxed object automatically (code added during processing)
4b. Object methods have been removed from sandboxed objects so no Kernel methods have been mixed in (__send__ etc)


== Contributing to sandboxed_erb
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 MarkPent. See LICENSE.txt for
further details.

